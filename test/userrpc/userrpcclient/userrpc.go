// Code generated by goctl. DO NOT EDIT.
// Source: userrpc.rpc

package userrpcclient

import (
	"context"

	"test/userrpc/userrpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Login        = userrpc.Login
	StreamResp   = userrpc.StreamResp
	UserRegister = userrpc.UserRegister

	Userrpc interface {
		Login(ctx context.Context, in *Login, opts ...grpc.CallOption) (*StreamResp, error)
		Register(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*StreamResp, error)
	}

	defaultUserrpc struct {
		cli zrpc.Client
	}
)

func NewUserrpc(cli zrpc.Client) Userrpc {
	return &defaultUserrpc{
		cli: cli,
	}
}

func (m *defaultUserrpc) Login(ctx context.Context, in *Login, opts ...grpc.CallOption) (*StreamResp, error) {
	client := userrpc.NewUserrpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserrpc) Register(ctx context.Context, in *UserRegister, opts ...grpc.CallOption) (*StreamResp, error) {
	client := userrpc.NewUserrpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}
